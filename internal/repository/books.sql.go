// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: books.sql

package repository

import (
	"context"

	"github.com/pgvector/pgvector-go"
)

const insertBook = `-- name: InsertBook :exec
INSERT INTO books (title, description, embedding)
VALUES ($1, $2, $3)
`

type InsertBookParams struct {
	Title       string
	Description string
	Embedding   pgvector.Vector
}

func (q *Queries) InsertBook(ctx context.Context, arg InsertBookParams) error {
	_, err := q.db.Exec(ctx, insertBook, arg.Title, arg.Description, arg.Embedding)
	return err
}

const searchBooks = `-- name: SearchBooks :many
SELECT id, title, description
FROM books
ORDER BY embedding <=> $1
LIMIT 5
`

type SearchBooksRow struct {
	ID          int32
	Title       string
	Description string
}

func (q *Queries) SearchBooks(ctx context.Context, embedding pgvector.Vector) ([]SearchBooksRow, error) {
	rows, err := q.db.Query(ctx, searchBooks, embedding)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchBooksRow
	for rows.Next() {
		var i SearchBooksRow
		if err := rows.Scan(&i.ID, &i.Title, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
